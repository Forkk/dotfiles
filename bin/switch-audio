#!/usr/bin/env bash

set -e

line_out=""
line_out_name="Line Out"
case "$HOSTNAME" in
    homebase )
        line_out="hdmi"
        line_out_name="HDMI"
        ;;
    * ) line_out="analog-stereo" ;;
esac

function notify {
    update-notify.sh audio "$@"
}

function sink-list {
    pacmd list-sinks | grep -A 1 index | \
        awk 'NR % 3 == 1 { if ($1 == "*") print "1",$3; else print "0",$2 }
NR % 3 == 2 { print $2 }'
}

sinks=($(sink-list))
inputs=($(pacmd list-sink-inputs | grep index | awk '{print $2}'))

declare -A names
headset=-1
speakers=0

cur_dev=2
for dev in $(seq 0 3 $((${#sinks[@]} - 1))); do
    idx=${sinks[$(($dev + 1))]}
    pulse_name=${sinks[$(($dev + 2))]}
    name="Unknown Device"
    case "$pulse_name" in
        *"G933"* ) name="Headset"; headset=$idx ;;
        *"$line_out"* ) name="$line_out_name"; speakers=$idx ;;
        * ) name="Unknown Device" ;;
    esac
    names[$idx]=$name

    if [[ $dev -gt 0 ]]; then
        indices+=($idx)
    fi

    if [[ ${sinks[$dev]} == "1" ]]; then
        # echo "Previous device: $idx (${names[$idx]})"
        cur_dev=$idx
    fi
done

swap=$cur_dev
if [[ $cur_dev == $speakers ]]; then
    if [[ $headset == -1 ]]; then
        notify "Switch Failed" "Headset was not found" --icon=dialog-warning
        exit 0
        swap=$speakers
    else
        swap=$headset
    fi
else
    swap=$speakers
fi

echo "New output: $swap (${names[$swap]})"
pacmd set-default-sink $swap

for i in ${inputs[*]}; do
    pacmd move-sink-input $i $swap &> /dev/null
done

notify "Audio Output Switched" "Switched audio device to ${names[$swap]}" --icon=speaker
